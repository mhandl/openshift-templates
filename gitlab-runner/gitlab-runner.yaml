# This file is part of https://github.com/hustlahusky/openshift-templates
#
# Partially based on :
#   https://gitlab.com/gitlab-org/omnibus-gitlab/blob/ux-demo/docker/openshift-ci-template.json
#   https://gitlab.com/oprudkyi/openshift-templates/blob/master/gitlab-runner/gitlab-runner.yaml
#   http://blog.lwolf.org/post/how-to-easily-deploy-gitlab-on-kubernetes/
#
# Copyright (c) 2018 Constantine Karnaukhov
#
apiVersion: v1
kind: Template
labels:
  template: gitlab-runner-template
metadata:
  annotations:
    iconClass: "fa fa-gitlab"
    description: |
      GitLab Runner Service.
      It uses GitLab Runner image from official repository at docker hub (https://hub.docker.com/r/gitlab/gitlab-runner/)
    openshift.io/display-name: GitLab Runner Service
    tags: "gitlab-runner, continuous integration, CI"
  creationTimestamp: null
  name: gitlab-runner
message: >-
  Before you start, please setup Security Context Constraints (SCC) for service accounts used for running containers (anyuid means commands inside containers can run as root)
    oc login -u system:admin
    oc adm policy add-scc-to-user anyuid -z ${GITLAB_RUNNER_NAME}-sa -n CURRENT_PROJECT_NAME
parameters:
- displayName: GitLab Runner Name
  name: GITLAB_RUNNER_NAME
  generate: expression
  from: "gitlab-runner-openshift-[0-9]{4}"

- description: The GitLab CI coordinator URL (e.g. https://gitlab.yourdomain.com/).
  displayName: GitLab CI URL
  name: GITLAB_RUNNER_CI_URL
  required: true
  value: https://git.artin.io

- description: Runner Registration Token from the GitLab app
  displayName: GitLab CI registration token
  name: GITLAB_RUNNER_REGISTRATION_TOKEN
  required: true

- description: Tag of GitLab Runner image (alpine or latest). Check https://hub.docker.com/r/gitlab/gitlab-runner/tags/ for list of supported values
  displayName: GitLab Runner Image Tag at Docker Hub
  name: GITLAB_RUNNER_IMAGE_DOCKER_TAG
  value: "latest"

objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${GITLAB_RUNNER_NAME}-sa
- apiVersion: v1
  kind: RoleBinding
  metadata:
    name: ${GITLAB_RUNNER_NAME}-rb-edit
  groupNames: null
  subjects:
    - kind: ServiceAccount
      name: ${GITLAB_RUNNER_NAME}-sa
  roleRef:
    name: edit
- apiVersion: v1
  kind: ImageStream
  metadata:
    creationTimestamp: null
    name: ${GITLAB_RUNNER_NAME}-is
  spec:
    dockerImageRepository: ""
    tags:
      -
       from:
         kind: DockerImage
         name: gitlab/gitlab-runner:${GITLAB_RUNNER_IMAGE_DOCKER_TAG}
       name: ${GITLAB_RUNNER_IMAGE_DOCKER_TAG}
       importPolicy:
         scheduled: true
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${GITLAB_RUNNER_NAME}-pvc-config
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${GITLAB_RUNNER_NAME}-scripts
  data:
    config.toml: |
      concurrent = 10
      check_interval = 10
    entrypoint: |
      #!/bin/bash
      set -e

      # Check runners are active and ready
      /entrypoint verify --delete

      # Check is any runner available
      countRunners() {
        n=$(/entrypoint list 2>&1 | wc -l) # count lines in list output
        echo $(expr $n - 1) # decrease result to ignore header output
      }

      # Register the runner
      if [ $(countRunners) -lt 1 ]; then
        # copy config defaults
        if [ ! -e /etc/gitlab-runner/config.toml ]; then
          cp /scripts/config.toml /etc/gitlab-runner/
        fi

        # register runner using environment variables
        /entrypoint register --non-interactive --url $GITLAB_RUNNER_CI_URL
      fi

      # Start the runner
      /entrypoint run \
        --user=gitlab-runner \
        --working-directory=/home/gitlab-runner
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: ${GITLAB_RUNNER_NAME}
  spec:
    replicas: 1
    selector:
      name: ${GITLAB_RUNNER_NAME}
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - cnt-gitlab-runner
        from:
          kind: ImageStreamTag
          name: ${GITLAB_RUNNER_NAME}-is:${GITLAB_RUNNER_IMAGE_DOCKER_TAG}
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: ${GITLAB_RUNNER_NAME}
      spec:
        volumes:
        - name: gitlab-runner-scripts
          configMap:
            name: ${GITLAB_RUNNER_NAME}-scripts
        - name: gitlab-runner-config
          persistentVolumeClaim:
            claimName: ${GITLAB_RUNNER_NAME}-pvc-config
        containers:
        - name: cnt-gitlab-runner
          image: ' '
          imagePullPolicy: IfNotPresent
          capabilities: {}
          env:
          - name: GITLAB_RUNNER_CI_URL
            value: ${GITLAB_RUNNER_CI_URL}
          - name: REGISTRATION_TOKEN
            value: ${GITLAB_RUNNER_REGISTRATION_TOKEN}
          - name: RUNNER_NAME
            value: ${GITLAB_RUNNER_NAME}
          - name: RUNNER_EXECUTOR
            value: kubernetes
          - name: KUBERNETES_IMAGE
            value: alpine:latest
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command: ["/bin/bash", "/scripts/entrypoint"]
          ports:
          - containerPort: 22
            protocol: TCP
          volumeMounts:
          - mountPath: /scripts
            name: gitlab-runner-scripts
          - mountPath: /etc/gitlab-runner
            name: gitlab-runner-config
          resources:
            limits:
              cpu: "600m"
              memory: "600Mi"
            requests:
              cpu: "100m"
              memory: "300Mi"
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          readinessProbe:
            exec:
              command:
              - /usr/bin/pgrep
              - gitlab-runner
            initialDelaySeconds: 5
            timeoutSeconds: 1
          livenessProbe:
            exec:
              command:
              - /usr/bin/pgrep
              - gitlab-runner
            initialDelaySeconds: 5
            timeoutSeconds: 1
        serviceAccountName: ${GITLAB_RUNNER_NAME}-sa
        dnsPolicy: ClusterFirst
        restartPolicy: Always
  status: {}
